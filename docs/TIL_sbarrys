[ 다형성의 본질 ]
- 역할과 구현을 분리하는것이다.
 ex)  MemberService(클라) -> MemberRepository.save()
                               ㄴ MemoryMemberRepository.save() // override
                               ㄴ JDBCMemberRepository.save() // override

        MemberService -> MemoryMemberRepository.save() 사용 가능
        MemberService -> JDBCMemberRepository.save() 사용 가능

- 즉, 실행 시점에서 유연하게 변경해서 원하는 것을 사용 할 수 있다.
- 클라이언트를 변경하지 않고 서버의 구현기능을 실행할때 원하는 기능으로 유연하게 변경 할 수있다.
- 실세계의 역할(로미오 역)과 구현(김태희, 전지현)을 구분해서  유연,변경용이,확장가능 하게 구현  => 역할이 바뀐다면 모든것을 뜯어고쳐야함
- 인터페이스(API, usb 인터페이스 등)의 안정적 설계가 중요


[스프링에서 다형성??]
스프링은 다형성을 극대화 해서 사용할 수 있게 해준다.
역할과 구현을 구분해서  원하는 시점에 변경해서 적절한 기능을 끼워서 이용할 수 있게 해주는것이다.
IOC /DI 는 다형성 ( 역할과 구현의 구분 ) 을 편리하게 할 수 있게 지원해주는 기능이다.
스프링을 이용하면 조립하듯이 개발 할 수있다.

[객체지향 구현 5원칙]
SOLID - 객체지향을 구현을 할 때 지켜야할 5가지 원칙이다
  > 한개의 클래스는 한개의 책임(기능)만 담당해야 한다.  ( M/V/C 분리 등등 )
  > 개방 폐쇄 원칙 ( 기능 추가 (확장) 할 때 수정하지 않고 가능해야한다. )
   ㄴ 다형성을 생각해서 역할과 구현을 생각해보자. 역할을 추가하는데, 구현에 대한 수정을 필요하지 않다.
   ㄴ 그런데, 생각해보자 - Service(클라) 에 있는 Repository 를 변경하려면 코드 수정이 필요하다. - 원칙이 깨지는 것
      그러면 어떻게해야할까? 우리는 그래서 연관관계를 맺어주는 설정자 가 필요해졌다.
      이렇게 DI 가 생기게 되고 우리는 클라이언트 코드를 수정하지 않고, 기능의 추가,변경이 가능해졌다.
  >
  > 인터페이스 분리 원칙 ( 각 클라이언트마다 다양한 인터페이스로 설계 해주어야 한다.)
  > 의존성 역전 원칙   - >  그래서 IOC 를 생기게 된다.
